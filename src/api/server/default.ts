//-----------------------------------------------------------------------------------------------
// This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//-----------------------------------------------------------------------------------------------

import { FineError } from '../../adk/error';
import { ForwardContext, Context } from '../../adk/api-server';
import { validateId, validateBody } from '../../adk/api-server';
import type { Message } from '../types';

export interface DefaultImpl {
    getRecentPrivates: (ctx: Context) => Promise<number[]>,
    getRecentGroups: (ctx: Context) => Promise<number[]>,
    getPrivateRecentMessages: (ctx: Context, privateId: number) => Promise<Message[]>,
    getGroupRecentMessages: (ctx: Context, groupId: number) => Promise<Message[]>,
    sendPrivateMessage: (ctx: Context, message: Message) => Promise<Message>,
    sendGroupMessage: (ctx: Context, message: Message) => Promise<Message>,
}

export async function dispatch(ctx: ForwardContext, impl: DefaultImpl): Promise<void> {
    let match: RegExpExecArray;
    const methodPath = `${ctx.method} ${ctx.path.slice(11)}`;

    match = /^GET \/recentPrivates$/.exec(methodPath); if (match) {
        ctx.body = await impl.getRecentPrivates(ctx.state);
        return;
    }
    match = /^GET \/recentGroups$/.exec(methodPath); if (match) {
        ctx.body = await impl.getRecentGroups(ctx.state);
        return;
    }
    match = /^GET \/privateRecentMessages\/(?<privateId>\d+)$/.exec(methodPath); if (match) {
        ctx.body = await impl.getPrivateRecentMessages(ctx.state, validateId('privateId', match.groups['privateId']));
        return;
    }
    match = /^GET \/groupRecentMessages\/(?<groupId>\d+)$/.exec(methodPath); if (match) {
        ctx.body = await impl.getGroupRecentMessages(ctx.state, validateId('groupId', match.groups['groupId']));
        return;
    }
    match = /^POST \/sendPrivateMessage$/.exec(methodPath); if (match) {
        ctx.body = await impl.sendPrivateMessage(ctx.state, validateBody(ctx.body));
        ctx.status = 201;
        return;
    }
    match = /^POST \/sendGroupMessage$/.exec(methodPath); if (match) {
        ctx.body = await impl.sendGroupMessage(ctx.state, validateBody(ctx.body));
        ctx.status = 201;
        return;
    }

    throw new FineError('not-found', 'invalid invocation');
}
